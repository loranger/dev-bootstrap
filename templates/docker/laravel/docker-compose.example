version: '3'

services:

  # apache:
  #   container_name: ${APP_PROJECT}-apache
  #   image: httpd:2.4
  #   env_file:
  #     - .env
  #   volumes_from:
  #     - php-fpm
  #   volumes:
  #     - ./.docker/apache/apache.conf:/usr/local/apache2/conf/httpd.conf
  #     - ./.docker/apache/vhost.conf:/usr/local/apache2/conf/extra/httpd-vhosts.conf
  #     - ./.docker/logs/apache:/var/log/apache
  #   labels:
  #     - "traefik.http.routers.${APP_PROJECT}.rule=Host(`${APP_DOMAIN}`)"
  #     - "traefik.http.services.${APP_PROJECT}-service.loadbalancer.server.port=80"
  #     - "com.centurylinklabs.watchtower.enable=true"
  #     - "diun.enable=true"
  #   depends_on:
  #     - php-fpm

  nginx:
    container_name: ${APP_PROJECT}-nginx
    image: nginx:stable-alpine
    env_file:
      - .env
    volumes_from:
      - php-fpm
    volumes:
      - ./.docker/nginx/nginx.conf:/etc/nginx/templates/default.conf.template
      - ./.docker/logs/nginx:/var/log/nginx
    labels:
      # Simple HTTP traefik support
      - "traefik.http.routers.${APP_PROJECT}.rule=Host(`${APP_DOMAIN}`)"
      - "traefik.http.services.${APP_PROJECT}-service.loadbalancer.server.port=80"
      # # TLS support, http>https redirection middleware, //www.domain>//domain redirection middleware
      # - "traefik.http.routers.${APP_PROJECT}.entrypoints=http"
      # - "traefik.http.routers.${APP_PROJECT}.rule=Host(`www.${APP_DOMAIN}`,`${APP_DOMAIN}`)"
      # - "traefik.http.routers.${APP_PROJECT}.middlewares=redirect-without-www@file,redirect-to-https@file"
      # - "traefik.http.routers.${APP_PROJECT}-secure.entrypoints=https"
      # - "traefik.http.routers.${APP_PROJECT}-secure.rule=Host(`www.${APP_DOMAIN}`,`${APP_DOMAIN}`)"
      # - "traefik.http.routers.${APP_PROJECT}-secure.tls=true"
      # - "traefik.http.routers.${APP_PROJECT}-secure.tls.certresolver=letsencrypt"
      # - "traefik.http.routers.${APP_PROJECT}-secure.middlewares=redirect-without-www@file"
      # # Enable https://crazymax.dev/diun/
      # - "diun.enable=true"
      # # Enable https://containrrr.dev/watchtower/
      # - "com.centurylinklabs.watchtower.enable=true"

    depends_on:
      - php-fpm

  php-fpm:
    container_name: ${APP_PROJECT}-php-fpm
    image: ${APP_PROJECT}-php-fpm
    build:
      context: .
      dockerfile: ./.docker/php-fpm/Dockerfile
    env_file:
      - .env
    volumes:
      - .:/var/www/app/:rw
    user: "${UID:-1000}:${GID:-1000}"
    labels:
      - "traefik.enable=false"

# docker-compose run --rm composer require machin/truc
  composer:
    image: ${APP_PROJECT}-php-fpm
    container_name: ${APP_PROJECT}-composer
    volumes_from:
      - php-fpm
    user: "${UID:-1000}:${GID:-1000}"
    working_dir: /var/www/app/
    command: -V
    entrypoint: ['/usr/bin/composer']

# docker-compose run --rm npm install
  npm:
    image: node:alpine
    container_name: ${APP_PROJECT}-npm
    volumes_from:
      - php-fpm
    user: "${UID:-1000}:${GID:-1000}"
    working_dir: /var/www/app/
    user: "node"
    command: -v
    entrypoint: ['npm']

# docker-compose run --rm artisan key:generate
  artisan:
    image: ${APP_PROJECT}-php-fpm
    container_name: ${APP_PROJECT}-artisan
    volumes_from:
      - php-fpm
    user: "${UID:-1000}:${GID:-1000}"
    depends_on:
      - mariadb
    command: inspire
    entrypoint: ['/var/www/app/artisan']

  scheduler:
    image: ${APP_PROJECT}-php-fpm
    command: ["/usr/sbin/crond", "-f", "-l", "2"]
    container_name: ${APP_PROJECT}-scheduler
    volumes_from:
      - php-fpm
    restart: unless-stopped
    depends_on:
      - mariadb
    labels:
      - "traefik.enable=false"

  mariadb:
    container_name: ${APP_PROJECT}-mariadb
    image: mariadb:latest
    # ports:
    #   - "${FORWARD_DB_PORT:-3306}:3306"
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - TZ=Europe/Paris
    volumes:
      - ./.docker/database:/var/lib/mysql
    labels:
      - "traefik.enable=false"

  # redis:
  #   container_name: ${APP_PROJECT}-redis
  #   image: 'redis:alpine'
  #   ports:
  #     - '${FORWARD_REDIS_PORT:-6379}:6379'
  #   volumes:
  #     - ./.docker/cache:/data
    # labels:
    #   - "traefik.enable=false"

  # memcached:
  #   container_name: ${APP_PROJECT}-memcached
  #   image: 'memcached:alpine'
  #   ports:
  #     - '${FORWARD_REDIS_PORT:-11211}:11211'
    # labels:
    #   - "traefik.enable=false"

  # mailhog:
  #   image: mailhog/mailhog:latest
  #   container_name: ${APP_PROJECT}-mailhog
  #   # ports:
  #   #   - "8003:1025" # SMTP Port
  #   #   - "8100:8025" # UI Port
  #   labels:
  #     - "traefik.http.routers.mailhog-${APP_PROJECT}.rule=Host(`mailhog.${APP_DOMAIN}`)"
  #     - "traefik.http.services.mailhog-${APP_PROJECT}-service.loadbalancer.server.port=8025"
  #     - "com.centurylinklabs.watchtower.enable=true"
  #     - "diun.enable=true"

  # adminer:
  #   container_name: ${APP_PROJECT}-adminer
  #   image: adminer:latest
  #   environment:
  #       ADMINER_DEFAULT_SERVER: ${DB_HOST}
  #       ADMINER_DESIGN: flat
  #   # ports:
  #   #   - 8888:8080
  #   labels:
  #     # Simple HTTP traefik support
  #     - "traefik.http.routers.${APP_PROJECT}-adminer.rule=Host(`adminer.${APP_DOMAIN}`)"
  #     - "traefik.http.services.${APP_PROJECT}-adminer-service.loadbalancer.server.port=8080"

networks:
  default:
      name: web
